<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE mapper
        PUBLIC '-//mybatis.org//DTD Mapper 3.0//EN'
        'http://mybatis.org/dtd/mybatis-3-mapper.dtd'>
<mapper namespace='com.happyjob.jobfolio.repository.admin.AdminMapper'>

    <!-- STATUS가 'N' 인 회원 수 계산 -->
    <select id='countMembersWithStatus' resultType='int'>
        SELECT COUNT(*)
        FROM tb_userinfo
        WHERE status_yn IN ('N')
    </select>

    <!-- 결제 내역 테이블의 총 수익 계산 -->
    <select id='calculateTotalEarnings' resultType='int'>
        SELECT COALESCE(SUM(amount), 0)
        FROM tb_payment_his
        WHERE pay_status = 2
    </select>

    <!-- 결제 내역 테이블의 구매자 수 계산 -->
    <select id='calculateTotalConsumers' resultType='int'>
        SELECT COUNT(DISTINCT user_no)
        FROM tb_payment_his
    </select>

    <!-- 월별 수익 계산 -->
    <select id='getMonthlyEarnings' resultType='map'>
        SELECT
            DATE_FORMAT(paid_date, '%Y-%m') AS month,
            COALESCE(SUM(amount), 0) AS earnings
        FROM tb_payment_his
        WHERE pay_status = 2
        GROUP BY DATE_FORMAT(paid_date, '%Y-%m')
        ORDER BY month
    </select>

    <!-- 월별 가입 고객 수 조회 -->
    <select id='getMonthlyMembers' resultType='map'>
        SELECT
            DATE_FORMAT(reg_date, '%Y-%m') AS month,
            COUNT(*) AS memberCount
        FROM tb_userinfo
        WHERE status_yn IN ('N')
        GROUP BY DATE_FORMAT(reg_date, '%Y-%m')
        ORDER BY month
    </select>

    <!-- 구독 분포(전체/일반/구독자) -->
    <select id='getSubscribeDistribution' resultType='map'>
        SELECT
            COUNT(*) AS totalUsers,
            SUM(CASE WHEN user_no NOT IN (SELECT user_no FROM tb_payment_his) THEN 1 ELSE 0 END) AS generalUsers,
            COUNT(DISTINCT CASE WHEN user_no IN (SELECT user_no FROM tb_payment_his) THEN user_no END) AS subscribedUsers
        FROM tb_userinfo
        WHERE status_yn IN ('N')
    </select>

    <!-- 일반 회원 수 -->
    <select id='getGeneralUsers' resultType='int'>
        SELECT COUNT(*)
        FROM tb_userinfo u
        WHERE status_yn IN ('N')
          AND NOT EXISTS (
            SELECT 1 FROM tb_payment_his p WHERE p.user_no = u.user_no
        )
    </select>

    <!-- VIP 및 일반 회원 분포 -->
    <select id='getConsumerDistribution' resultType='map'>
        SELECT
            SUM(CASE WHEN product_no = 1 THEN 1 ELSE 0 END) AS subscribe1,
            SUM(CASE WHEN product_no = 2 THEN 1 ELSE 0 END) AS subscribe2,
            SUM(CASE WHEN product_no = 3 THEN 1 ELSE 0 END) AS subscribe3,
            (SELECT
                 COUNT(*) AS expire_days_null_count
             FROM
                 tb_userinfo
             WHERE
                 expire_days IS NULL) AS normal
        FROM tb_payment_his
    </select>

    <!-- 사용 기록 총 카운트 -->
    <select id='countTotalTasks' resultType='int'>
        SELECT COUNT(*)
        FROM tb_resume_info
    </select>

    <!-- 회원 목록 필터링 및 페이징   -->
    <select id="selectFillterAndPageCustomers" parameterType="map" resultType="com.happyjob.jobfolio.vo.usermgr.UserModel">
        SELECT
            user_no,
            login_id,
            user_type,
            user_name,
            reg_date,
            status_yn,
            expire_days,
            withdrawal_date
        FROM tb_userinfo
        <where>
            <if test="search != null and search != ''">
                AND (login_id LIKE CONCAT('%', #{search}, '%')
                OR user_name LIKE CONCAT('%', #{search}, '%'))
            </if>
        <if test="type != null and type != '' and type != null">
            <choose>
                <when test="type == 'ADMIN_GROUP'">
                    AND user_type IN ('A', 'B') </when>
                <otherwise>
                    AND user_type = #{type} </otherwise>
            </choose>
        </if>
        </where>
            LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 회원 검색별로 카운트  -->
    <select id="selectTotalCustomerCount" resultType="int">
        SELECT COUNT(*)
        FROM tb_userinfo
        <where>
            <if test="search != null and search != ''">
                AND (login_id LIKE CONCAT('%', #{search}, '%')
                OR user_name LIKE CONCAT('%', #{search}, '%'))
            </if>

            <if test="type != null and type != '' and type != null">
                <choose>
                    <when test="type == 'ADMIN_GROUP'">
                        AND user_type IN ('A', 'B')
                    </when>
                    <otherwise>
                        AND user_type = #{type}
                    </otherwise>
                </choose>
            </if>
        </where>
    </select>

    <!-- 특정 회원 정보 조회 -->
    <select id="getMemberById" parameterType="String" resultType="com.happyjob.jobfolio.vo.usermgr.UserModel">
        SELECT
            user_no,
            login_id,
            user_type,
            user_name,
            password,
            birthday,
            sex,
            hp,
            reg_date,
            withdrawal_date,
            status_yn,
            expire_days,
            address,
            hobby,
            notes,
            social_type,
            social_id
        FROM tb_userinfo
        WHERE login_id = #{memberId}
    </select>

    <!-- 사용자 권한 변경 (C ↔ B) -->
    <update id="updateUserAuthority" parameterType="map">
        UPDATE tb_userinfo
        SET user_type = #{userType}
        WHERE login_id = #{memberId}
    </update>

    <!-- 사용자 탈퇴 처리 (N → Y, withdrawal_date 현재시간) -->
    <update id="withdrawUser" parameterType="String">
        UPDATE tb_userinfo
        SET status_yn = 'Y',
            withdrawal_date = CURRENT_TIMESTAMP
        WHERE login_id = #{memberId}
    </update>

    <!-- 탈퇴 사용자 복구 (Y → N, withdrawal_date NULL) -->
    <update id="restoreUser" parameterType="String">
        UPDATE tb_userinfo
        SET status_yn = 'N',
            withdrawal_date = NULL
        WHERE login_id = #{memberId}
    </update>

    <!-- 관리자가 회원 정보 수정 (비밀번호 제외) -->
    <update id="updateMemberInfo" parameterType="com.happyjob.jobfolio.vo.usermgr.UserModel">
        UPDATE tb_userinfo
        SET
        <if test="user_name != null and user_name != ''">user_name = #{user_name},</if>
        <if test="user_type != null and user_type != ''">user_type = #{user_type},</if>
        <if test="sex != null and sex != ''">sex = #{sex},</if>
        <if test="birthday != null and birthday != ''">birthday = #{birthday},</if>
        <if test="hp != null and hp != ''">hp = #{hp},</if>
        <if test="status_yn != null and status_yn != ''">status_yn = #{status_yn},</if>
        <if test="address != null and address != ''">address = #{address},</if>
        <if test="hobby != null and hobby != ''">hobby = #{hobby},</if>
        <if test="notes != null and note != ''">note = #{notes},</if>
        <if test="withdrawal_date != null">withdrawal_date = #{withdrawal_date},</if>
        user_no = user_no
        WHERE login_id = #{login_id}
    </update>

    <select id="getAllMembers" resultType="com.happyjob.jobfolio.vo.usermgr.UserModel">
        SELECT
            user_no, login_id, user_type, user_name, birthday, sex, hp,
            reg_date, withdrawal_date, status_yn, expire_days,
            address, hobby, notes, social_type, social_id
        FROM tb_userinfo
        ORDER BY reg_date DESC
    </select>


</mapper>
