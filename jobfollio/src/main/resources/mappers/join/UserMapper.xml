<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.happyjob.jobfolio.repository.join.UserMapper">

    <!-- 사용자 정보 ResultMap -->
    <resultMap id="userResultMap" type="com.happyjob.jobfolio.vo.join.UserVO">
        <id property="user_no" column="user_no"/>
        <result property="login_id" column="login_id"/>
        <result property="user_type" column="user_type"/>
        <result property="user_name" column="user_name"/>
        <result property="password" column="password"/>
        <result property="birthday" column="birthday"/>
        <result property="sex" column="sex"/>
        <result property="hp" column="hp"/>
        <result property="reg_date" column="reg_date"/>
        <result property="withdrawal_date" column="withdrawal_date"/>
        <result property="status_yn" column="status_yn"/>
        <result property="expire_days" column="expire_days"/>
        <result property="address" column="address"/>
        <result property="hobby" column="hobby"/>
        <result property="notes" column="notes"/>
    </resultMap>

    <!-- ================= 기본 CRUD ================= -->

    <!-- 사용자 등록 -->
    <insert id="insertUser" parameterType="map" useGeneratedKeys="true" keyProperty="user_no">
        INSERT INTO tb_userinfo (
        login_id,
        user_type,
        user_name,
        password,
        birthday,
        sex,
        hp,
        reg_date,
        status_yn,
        address,
        hobby,
        notes
        ) VALUES (
        #{login_id},
        COALESCE(#{user_type}, 'C'),
        #{user_name},
        #{password},
        #{birthday},
        #{sex},
        #{hp},
        NOW(),
        'N',  <!-- 'N'사용상태, 'Y'=탈퇴상태 -->
        #{address},
        #{hobby},
        #{notes}
        )
    </insert>

    <!-- 로그인 ID 중복 체크 -->
    <select id="checkLoginIdDuplicate" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM tb_userinfo
        WHERE login_id = #{login_id}
        <!-- 🔥 수정: 조건부로 탈퇴한 계정 제외 -->
        <if test="exclude_withdrawn != null and exclude_withdrawn == 'Y'">
            AND status_yn = 'N'
            AND withdrawal_date IS NULL
        </if>
    </select>

    <!-- 로그인ID로 사용자 조회 -->
    <select id="selectUserByLoginId" parameterType="map" resultMap="userResultMap">
        SELECT
            user_no,
            login_id,
            user_type,
            user_name,
            password,
            birthday,
            sex,
            hp,
            DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') AS reg_date,
            DATE_FORMAT(withdrawal_date, '%Y-%m-%d %H:%i:%s') AS withdrawal_date,
            status_yn,
            expire_days,
            address,
            hobby,
            notes
        FROM tb_userinfo
        WHERE login_id = #{login_id}
        ORDER BY reg_date DESC
            LIMIT 1
    </select>

    <!-- 사용자번호로 사용자 조회 -->
    <select id="selectUserByUserNo" parameterType="map" resultMap="userResultMap">
        SELECT
            user_no,
            login_id,
            user_type,
            user_name,
            password,
            birthday,
            sex,
            hp,
            DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') AS reg_date,
            DATE_FORMAT(withdrawal_date, '%Y-%m-%d %H:%i:%s') AS withdrawal_date,
            status_yn,
            expire_days,
            address,
            hobby,
            notes
        FROM tb_userinfo
        WHERE user_no = #{user_no}
    </select>

    <!-- 사용자 정보 수정 -->
    <update id="updateUser" parameterType="map">
        UPDATE tb_userinfo
        SET
            user_name = #{user_name},
            birthday = #{birthday},
            sex = #{sex},
            hp = #{hp},
            address = #{address},
            hobby = #{hobby},
            notes = #{notes}
        WHERE user_no = #{user_no}
          AND status_yn = 'N'
          AND withdrawal_date IS NULL
    </update>

    <!-- 비밀번호 변경 -->
    <update id="updatePassword" parameterType="map">
        UPDATE tb_userinfo
        SET password = #{newPassword}
        WHERE login_id = #{login_id}
          AND status_yn = 'N'
          AND withdrawal_date IS NULL
    </update>

    <!-- 회원 탈퇴 -->
    <update id="withdrawUser" parameterType="map">
        UPDATE tb_userinfo
        SET
        status_yn = #{status_yn},
        withdrawal_date = #{withdrawal_date}
        WHERE user_no = #{user_no}
        AND login_id = #{login_id}
        AND status_yn = 'N'
        AND withdrawal_date IS NULL
    </update>

    <!-- 이름과 연락처로 사용자 조회 -->
    <select id="selectUserByNameAndHp" parameterType="map" resultMap="userResultMap">
        SELECT
            user_no,
            login_id,
            user_name,
            DATE_FORMAT(reg_date, '%Y-%m-%d') AS reg_date
        FROM tb_userinfo
        WHERE user_name = #{user_name}
          AND hp = #{hp}
          AND status_yn = 'N'
          AND withdrawal_date IS NULL
        ORDER BY reg_date DESC
            LIMIT 1
    </select>

    <!-- 비밀번호 찾기용 사용자 검증 -->
    <select id="selectUserForPasswordReset" parameterType="map" resultMap="userResultMap">
        SELECT
            user_no,
            login_id,
            user_name,
            hp
        FROM tb_userinfo
        WHERE login_id = #{login_id}
          AND user_name = #{user_name}
          AND hp = #{hp}
          AND status_yn = 'N'
          AND withdrawal_date IS NULL
          AND reg_date >= DATE_SUB(NOW(), INTERVAL 2 YEAR)
    </select>

</mapper>