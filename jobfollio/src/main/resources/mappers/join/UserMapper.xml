<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.happyjob.jobfolio.repository.join.UserMapper">

    <!-- 사용자 정보 ResultMap -->
    <resultMap id="userResultMap" type="com.happyjob.jobfolio.vo.join.UserVO">
        <id property="userNo" column="user_no"/>
        <result property="loginId" column="login_id"/>
        <result property="userType" column="user_type"/>
        <result property="userName" column="user_name"/>
        <result property="password" column="password"/>
        <result property="birthday" column="birthday"/>
        <result property="sex" column="sex"/>
        <result property="hp" column="hp"/>
        <result property="regDate" column="reg_date"/>
        <result property="withdrawalDate" column="withdrawal_date"/>
        <result property="statusYn" column="status_yn"/>
        <result property="expireDays" column="expire_days"/>
        <result property="address" column="address"/>
        <result property="hobby" column="hobby"/>
        <result property="notes" column="notes"/>
    </resultMap>

    <!-- ================= 기본 CRUD ================= -->

    <!-- 사용자 등록  -->
    <insert id="insertUser" parameterType="map" useGeneratedKeys="true" keyProperty="userNo">
        INSERT INTO tb_userinfo (
        login_id,
        user_type,
        user_name,
        password,
        birthday,
        sex,
        hp,
        reg_date,
        status_yn,
        address,
        hobby,
        notes
        ) VALUES (
        #{loginId},
        COALESCE(#{userType}, 'C'),
        #{userName},
        #{password},
        #{birthday},
        #{sex},
        #{hp},
        NOW(),
        'N',  <!-- ('Y'=탈퇴, 'N'=활성) -->
        #{address},
        #{hobby},
        #{notes}
        )
    </insert>

    <!-- 로그인 ID 중복 체크 -->
    <select id="checkLoginIdDuplicate" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM tb_userinfo
        WHERE login_id = #{loginId}
        AND status_yn = 'N'
        AND withdrawal_date IS NULL
    </select>

    <!-- 로그인ID로 사용자 조회  -->
    <select id="selectUserByLoginId" parameterType="map" resultMap="userResultMap">
        SELECT
        user_no,
        login_id,
        user_type,
        user_name,
        password,
        birthday,
        sex,
        hp,
        DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') AS reg_date,
        DATE_FORMAT(withdrawal_date, '%Y-%m-%d %H:%i:%s') AS withdrawal_date,
        status_yn,
        expire_days,
        address,
        hobby,
        notes
        FROM tb_userinfo
        WHERE login_id = #{loginId}
        AND status_yn = 'N'
        AND withdrawal_date IS NULL
        ORDER BY reg_date DESC
        LIMIT 1
    </select>

    <!-- 사용자번호로 사용자 조회 -->
    <select id="selectUserByUserNo" parameterType="map" resultMap="userResultMap">
        SELECT
        user_no,
        login_id,
        user_type,
        user_name,
        password,
        birthday,
        sex,
        hp,
        DATE_FORMAT(reg_date, '%Y-%m-%d %H:%i:%s') AS reg_date,
        DATE_FORMAT(withdrawal_date, '%Y-%m-%d %H:%i:%s') AS withdrawal_date,
        status_yn,
        expire_days,
        address,
        hobby,
        notes
        FROM tb_userinfo
        WHERE user_no = #{userNo}
        AND status_yn = 'N'
        AND withdrawal_date IS NULL
    </select>

    <!-- 사용자 정보 수정 -->
    <update id="updateUser" parameterType="map">
        UPDATE tb_userinfo
        SET
        user_name = #{userName},
        birthday = #{birthday},
        sex = #{sex},
        hp = #{hp},
        address = #{address},
        hobby = #{hobby},
        notes = #{notes}
        WHERE user_no = #{userNo}
        AND status_yn = 'N'
        AND withdrawal_date IS NULL
    </update>

    <!-- 비밀번호 변경 -->
    <update id="updatePassword" parameterType="map">
        UPDATE tb_userinfo
        SET password = #{newPassword}
        WHERE login_id = #{loginId}
        AND status_yn = 'N'
        AND withdrawal_date IS NULL
    </update>

    <!-- 회원 탈퇴  -->
    <update id="withdrawUser" parameterType="map">
        UPDATE tb_userinfo
        SET
        status_yn = 'Y',
        withdrawal_date = NOW(),
        user_name = '탈퇴회원',
        hp = NULL,
        address = NULL,
        hobby = NULL,
        notes = '회원탈퇴'
        WHERE user_no = #{userNo}
        AND status_yn = 'N'
        AND withdrawal_date IS NULL
    </update>

    <!-- 이름과 연락처로 사용자 조회 (아이디 찾기) -->
    <select id="selectUserByNameAndHp" parameterType="map" resultMap="userResultMap">
        SELECT
        user_no,
        login_id,
        user_name,
        DATE_FORMAT(reg_date, '%Y-%m-%d') AS reg_date
        FROM tb_userinfo
        WHERE user_name = #{userName}
        AND hp = #{hp}
        AND status_yn = 'N'
        AND withdrawal_date IS NULL
        ORDER BY reg_date DESC
        LIMIT 1
    </select>

    <!-- 비밀번호 찾기용 사용자 검증 -->
    <select id="selectUserForPasswordReset" parameterType="map" resultMap="userResultMap">
        SELECT
        user_no,
        login_id,
        user_name,
        hp
        FROM tb_userinfo
        WHERE login_id = #{loginId}
        AND user_name = #{userName}
        AND hp = #{hp}
        AND status_yn = 'N'
        AND withdrawal_date IS NULL
        AND reg_date >= DATE_SUB(NOW(), INTERVAL 2 YEAR)
    </select>

</mapper>